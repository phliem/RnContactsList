const fs = require('fs');

/**
 * Create a array of filename
 * @param {String} directory to read from
 * @returns {Array} array for filename
 */
const getCleanListOfFilenames = (dir) => {
  const filenames = fs
    .readdirSync(dir)
    .filter((file) => {
      // Keep only one version of the image
      return file.endsWith('@2x.png');
    })
    .map((file) => {
      // Clean filename: 'allan-munger@2x.png' to 'allan-munger'
      return file.replace('@2x.png', '');
    });

  return filenames;
};

/**
 * Generate a file with a reference of images
 * @param {String} dir - Directory to read from
 * @param {*} fileOutput - File to output the list of images
 */
const generateReferenceFile = (dir, fileOutput) => {
  // Generate each string with all the pairs
  let KeyValuePairs = getCleanListOfFilenames(dir)
    .map((name) => {
      return `'${name}': require('./avatars/${name}.png')`;
    })
    .join(',\n  ');

  const fileString = `/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY (SEE 'scripts/format-images.js') */\n
const AVATARS = {\n  ${KeyValuePairs},\n};\n
export default AVATARS;
`;

  // Create the file
  fs.writeFileSync(fileOutput, fileString, 'utf8');
};

/**
 * Clean and rename all filename from a directory.
 * eg: 'Allan Munger@2x.png' to 'allan-munger@2x.png'
 * @param {String} dir - Directory to read from
 */
const cleanFilenamesFromDirectory = (dir) => {
  fs.readdirSync(dir).forEach((filename) => {
    const cleanName = filename.replace(/\s/g, '-').toLowerCase();
    const oldFilename = dir + '/' + filename;
    const newFilename = dir + '/' + cleanName;
    fs.renameSync(oldFilename, newFilename, (err) => {
      if (err) {
        console.log('ERROR: ' + err);
      }
    });
  });
};

const IMAGES_DIRECTORY_INPUT = 'src/res/avatars';
const FILE_OUTPUT = 'src/res/avatars.js';

cleanFilenamesFromDirectory(IMAGES_DIRECTORY_INPUT);
generateReferenceFile(IMAGES_DIRECTORY_INPUT, FILE_OUTPUT);
